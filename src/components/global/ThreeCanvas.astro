---
---
<div class="three-canvas"></div>

<script>
    import * as THREE from 'three';
    import { 
        WebGLRenderer,
        Scene,
        Mesh,
        PerspectiveCamera,
        TextureLoader,
        Vector2,
        Vector3,
        Raycaster,
        ShaderMaterial,
        PlaneGeometry,
        SRGBColorSpace,
        LinearSRGBColorSpace,
        ShapeGeometry,
    } from 'three';

    import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
    import { ShaderPass } from 'three/addons/postprocessing/ShaderPass.js';
    import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
    import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';
    import { LoopSubdivision } from 'three-subdivide';


    import { lenis } from '../../utils/lenis';
    import { gsap } from '../../utils/gsap';

    let renderer : WebGLRenderer
    let camera : PerspectiveCamera
    let canvas : HTMLElement
    let scene : Scene
    let images : NodeListOf<HTMLImageElement>
    let imageMeshes : Array<Mesh> = []
    let textureLoader : TextureLoader
    let composer : EffectComposer
    let effectsPass : RenderPass
    let raycaster : Raycaster

    let width : number
    let height : number
    let scrollPosition = 0
    let initialScroll = lenis.actualScroll
    let mousePosition = new Vector2(0.5, 0.5)
    let mouseSpeed = new Vector2(0, 0)

    let shouldRender = true;

    const noise = `
        //	Classic Perlin 3D Noise 
        //	by Stefan Gustavson
        //
        vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
        vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
        vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

        float cnoise(vec3 P){
            vec3 Pi0 = floor(P); // Integer part for indexing
            vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
            Pi0 = mod(Pi0, 289.0);
            Pi1 = mod(Pi1, 289.0);
            vec3 Pf0 = fract(P); // Fractional part for interpolation
            vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
            vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
            vec4 iy = vec4(Pi0.yy, Pi1.yy);
            vec4 iz0 = Pi0.zzzz;
            vec4 iz1 = Pi1.zzzz;

            vec4 ixy = permute(permute(ix) + iy);
            vec4 ixy0 = permute(ixy + iz0);
            vec4 ixy1 = permute(ixy + iz1);

            vec4 gx0 = ixy0 / 7.0;
            vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
            gx0 = fract(gx0);
            vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
            vec4 sz0 = step(gz0, vec4(0.0));
            gx0 -= sz0 * (step(0.0, gx0) - 0.5);
            gy0 -= sz0 * (step(0.0, gy0) - 0.5);

            vec4 gx1 = ixy1 / 7.0;
            vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
            gx1 = fract(gx1);
            vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
            vec4 sz1 = step(gz1, vec4(0.0));
            gx1 -= sz1 * (step(0.0, gx1) - 0.5);
            gy1 -= sz1 * (step(0.0, gy1) - 0.5);

            vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
            vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
            vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
            vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
            vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
            vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
            vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
            vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

            vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
            g000 *= norm0.x;
            g010 *= norm0.y;
            g100 *= norm0.z;
            g110 *= norm0.w;
            vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
            g001 *= norm1.x;
            g011 *= norm1.y;
            g101 *= norm1.z;
            g111 *= norm1.w;

            float n000 = dot(g000, Pf0);
            float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
            float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
            float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
            float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
            float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
            float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
            float n111 = dot(g111, Pf1);

            vec3 fade_xyz = fade(Pf0);
            vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
            vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
            float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
            return 2.2 * n_xyz;
        }
    `

    const RoundedRectangle = ( w, h, r, s ) => { // width, height, radius corner, smoothness  
	
        // helper const's
        const wi = w / 2 - r;		// inner width
        const hi = h / 2 - r;		// inner height
        const w2 = w / 2;			// half width
        const h2 = h / 2;			// half height
        const ul = r / w;			// u left
        const ur = ( w - r ) / w;	// u right
        const vl = r / h;			// v low
        const vh = ( h - r ) / h;	// v high
        
        let positions = [
        
            -wi, -h2, 0,  wi, -h2, 0,  wi, h2, 0,
            -wi, -h2, 0,  wi,  h2, 0, -wi, h2, 0,
            -w2, -hi, 0, -wi, -hi, 0, -wi, hi, 0,
            -w2, -hi, 0, -wi,  hi, 0, -w2, hi, 0,
            wi, -hi, 0,  w2, -hi, 0,  w2, hi, 0,
            wi, -hi, 0,  w2,  hi, 0,  wi, hi, 0
            
        ];
        
        let uvs = [
            
            ul,  0, ur,  0, ur,  1,
            ul,  0, ur,  1, ul,  1,
            0, vl, ul, vl, ul, vh,
            0, vl, ul, vh,  0, vh,
            ur, vl,  1, vl,  1, vh,
            ur, vl,  1, vh,	ur, vh 
            
        ];
        
        let phia = 0; 
        let phib, xc, yc, uc, vc, cosa, sina, cosb, sinb;
        
        for ( let i = 0; i < s * 4; i ++ ) {
        
            phib = Math.PI * 2 * ( i + 1 ) / ( 4 * s );
            
            cosa = Math.cos( phia );
            sina = Math.sin( phia );
            cosb = Math.cos( phib );
            sinb = Math.sin( phib );
            
            xc = i < s || i >= 3 * s ? wi : - wi;
            yc = i < 2 * s ? hi : -hi;
        
            positions.push( xc, yc, 0, xc + r * cosa, yc + r * sina, 0,  xc + r * cosb, yc + r * sinb, 0 );
            
            uc =  i < s || i >= 3 * s ? ur : ul;
            vc = i < 2 * s ? vh : vl;
            
            uvs.push( uc, vc, uc + ul * cosa, vc + vl * sina, uc + ul * cosb, vc + vl * sinb );
            
            phia = phib;
                
        }
        
        const geometry = new THREE.BufferGeometry( );
        geometry.setAttribute( 'position', new THREE.BufferAttribute( new Float32Array( positions ), 3 ) );
        geometry.setAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );
        
        return geometry;
        
    }

    const baseMaterial = new THREE.ShaderMaterial({
        uniforms: {
            uImage: { value: null },
            uTime: { value: 0.0 },
            uHover: { value: new THREE.Vector2(0.5, 0.5)},
            uHoverState: { value: 0.0 },
            uMousePosition: { value: mousePosition },
            uMouseSpeed: { value: new THREE.Vector2(0.0, 0.0) }
        },
        vertexShader: `
            varying vec2 vUv;
            varying float vDistance;
            varying vec2 vPosition;
            uniform vec2 uMousePosition;
            uniform vec2 uMouseSpeed;
            uniform float uHoverState;
            uniform float uTime;

            void main() {
                vUv = uv;
                vec3 newPosition = position;


                vDistance = distance(vUv, uMousePosition);

                // newPosition.z += 1.0 - uHoverState * ((1.0 - vDistance) * 0.1) * 500.;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
            }
        `,
        fragmentShader: `
            varying vec2 vUv;
            varying float vDistance;
            varying vec2 vPosition;

            uniform sampler2D uImage;
            uniform vec2 uMousePosition;
            uniform vec2 uMouseSpeed;
            uniform float uHoverState;

            void main() {

                vec2 newUV = vUv;

                float pixelCount = 30.;
                float intensity = 100.;
                float cursorSize = 0.3;

                // float divisionsX =  (1.0 / pixelCount) * (abs(uMouseSpeed.x / 2.));
                // float divisionsY =  (1.0 / pixelCount) * (abs(uMouseSpeed.y / 2.));
                float divisionsX = (1.0 / pixelCount);
                float divisionsY =  (1.0 / pixelCount);

                // vec2 smoothDistance = smoothStep(0.001, 0.2, vDistance.x), smoothStep(0.001, 0.2, vDistance.y);

                vec2 pixelatedCoordinates = vec2(divisionsX * floor(vUv.x / divisionsX), divisionsY * floor(vUv.y / divisionsY));
                vec2 effectScale = uHoverState * abs(uMouseSpeed) * intensity * (1.0 - smoothstep(0.01, cursorSize, vDistance) ) ;

                // vec4 imageTexture = texture2D(uImage, mix(vUv, pixelatedCoordinates, uHoverState * (1.0 - smoothstep(0.001, 0.2, vDistance * (1.0 - uMouseSpeed.x) ) ) ) );
                vec4 imageTexture = texture2D(uImage, mix(vUv, pixelatedCoordinates, effectScale));

                gl_FragColor = vec4(imageTexture);
            }
        `,
        // wireframe: true,
    })

    const cameraDistance = 600

    const initScene = () => {

        canvas = document.querySelector('.three-canvas')
        images = document.querySelectorAll('img')

        width = canvas.offsetWidth
        height = canvas.offsetHeight


        scene = new THREE.Scene();

        camera = new PerspectiveCamera( 75, width / height, 100, 1000 );
        camera.position.z = cameraDistance;
        camera.fov = Math.atan( (height/2)/cameraDistance ) * 2 * (180/Math.PI)
        camera.updateProjectionMatrix();

        textureLoader = new TextureLoader()
        raycaster = new Raycaster()

        renderer = new WebGLRenderer({
            alpha: true,
            antialias: true,
        });

        renderer.setSize( width, height )
        renderer.setPixelRatio( window.devicePixelRatio )
        

        const customPass = {
            uniforms: {
                "tDiffuse": { value: null },
                "time": { value: null },
                "uMousePosition": { value: null },
            },
            vertexShader: `
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
                }
            `,
            fragmentShader: `
                uniform sampler2D tDiffuse;
                varying vec2 vUv;
                uniform float time;
                uniform vec2 uMousePosition;
                ${noise}

                void main() {
                    vec2 newUV = vUv;

                    float density = 300.0;
                    float speed = 0.05;
                    float noiseIntensity = 0.05;
                    float contrast = 1.0;
                    float cutoff = 0.01;

                    float noise = 10. * ( cnoise(vec3( vUv * density , time * speed)) );
                    float detailNoise = cnoise(vec3(vUv * density * 2.0, noise));

                    float pixelCount = 20.;
                    float pixelationIntensity = 1.0;
                    float divisionsX = (1.0 / pixelCount);
                    float divisionsY =  (1.0 / pixelCount);

                    float mask = 1.0 - smoothstep(-0.00, 0.3, newUV.y);
                    // newUV.x -= (newUV.x - 0.5) * (mask) * sin(noise * 0.5) * 0.01;


                    vec2 pixelatedCoordinates = vec2(divisionsX * floor(newUV.x / divisionsX), divisionsY * floor(newUV.y / divisionsY)) * pixelationIntensity;

                    // vec4 diffuse = texture2D( tDiffuse, mix(newUV, pixelatedCoordinates, mask ));
                    vec4 diffuse = texture2D( tDiffuse, newUV);
                    diffuse.w = mix(diffuse.w, 0.0, clamp(detailNoise * mask, 0.0, 0.3) * detailNoise);
                    // vec4 mixedDiffuse = vec4( mix(diffuse.xy, pixelatedCoordinates, newUV.y), newUV);

                    // gl_FragColor = texture2D( tDiffuse, newUV);
                    vec4 noisyDiffuse = vec4( mix(diffuse, vec4(0.0, 0.0, 0.0, contrast), step(detailNoise, cutoff) * noiseIntensity ) );
                    // gl_FragColor = vec4(mask, mask, mask, 1.0);
                    gl_FragColor = noisyDiffuse;
                }
            `
        }

        composer = new EffectComposer( renderer )
        const renderPass = new RenderPass( scene, camera )
        const outputPass = new OutputPass()

        effectsPass = new ShaderPass(customPass)
        effectsPass.renderToScreen = true;
        effectsPass.alpha = true


        composer.addPass( renderPass );
        // composer.addPass( filmPass )
        composer.addPass( effectsPass );
        composer.addPass( outputPass );

        canvas.appendChild( renderer.domElement );
    }

    

    const addImagePlanes = () => {
        

        return images.forEach((image, i) => {
            image.dataset.meshIndex = `${i}`
            const boundingBox = image.getBoundingClientRect()

            const geometry = LoopSubdivision.modify(RoundedRectangle(boundingBox.width, boundingBox.height, 15.0, 5.0), 3, {
                flatOnly: true,
                // uvSmooth: true,
                preserveEdges: true,
                maxTriangles: 2000,
            })
            // const geometry = new PlaneGeometry(boundingBox.width, boundingBox.height, resolution, resolution);
            let imageTexture = textureLoader.load(image.currentSrc, (texture) => {
                texture.colorSpace = SRGBColorSpace
                texture.needsUpdate = true
            })

            const material = baseMaterial.clone();
            material.uniforms.uImage.value = imageTexture
            material.needsUpdate = true;
            // material.wireframe = true;
            const plane = new Mesh( geometry, material );

            positionImage(plane, boundingBox)

            scene.add( plane )

            image.addEventListener("mouseenter", () => {
                // material.uniforms.uHoverState.value = 1;
                gsap.to(material.uniforms.uHoverState, {
                    duration: 1,
                    value: 1
                })
            })

            image.addEventListener("mouseleave", () => {
                // material.uniforms.uHoverState.value = 0;
                gsap.to(material.uniforms.uHoverState, {
                    duration: 1,
                    value: 0
                })
            })

            lenis.on("scroll", (e) => {
                shouldRender = true
                scrollPosition = e.animatedScroll
                plane.position.y = -boundingBox.top + height / 2 - boundingBox.height / 2 + scrollPosition - initialScroll
            })

            imageMeshes.push({
                plane,
                index: i,
                initialWidth: boundingBox.width,
                initialHeight: boundingBox.height,
                element: image,
                initialCanvasSize: {
                    width,
                    height
                }
            })

            image.style.opacity = '0'


            return {
                plane,
                boundingBox
            }
        })
        
    }

    const positionImage = (mesh, boundingBox) => {
        mesh.position.x = (boundingBox.left - width / 2 + boundingBox.width / 2) * mesh.scale.x
        mesh.position.y = -boundingBox.top + height / 2 * mesh.scale.y - boundingBox.height / 2 + scrollPosition
        // mesh.position.y = -boundingBox.top + height / 2 - boundingBox.height / 2 + scrollPosition - initialScroll
    }

    const handleResize = (e) => {

        // console.log(e)

        width = canvas.offsetWidth
        height = canvas.offsetHeight

        renderer.setSize( width, height );

        camera.aspectRatio = width / height
        camera.fov = Math.atan( (height/2)/cameraDistance ) * 2 * (180/Math.PI)
        camera.updateProjectionMatrix();

        scrollPosition = lenis.actualScroll

        reflowImages()
    }

    const reflowImages = () => {
        imageMeshes.forEach((mesh) => {
            
            // console.log(mesh)
            const newBoundingBox = mesh.element.getBoundingClientRect();
            // console.log(newBoundingBox.width / mesh.initialWidth)


            if (width != mesh.initialCanvasSize.width) {
                mesh.plane.scale.y = newBoundingBox.height / mesh.initialHeight
            }

            if (height != mesh.initialCanvasSize.height) {
                // mesh.plane.scale.x = newBoundingBox.width / mesh.initialWidth
            }

            positionImage(mesh.plane, newBoundingBox)
        })
    }

    const destroyScene = () => {
        // scene.dispose()
        // camera.dispose()
        // renderer.dispose()
    }

    const render = () => {

        requestAnimationFrame( render );
        // renderer.render( scene, camera );

        if (shouldRender) {
            composer.render();

            
            // console.log(mousePosition)
            raycaster.setFromCamera( mousePosition, camera );

            // calculate objects intersecting the picking ray
            const intersects = raycaster.intersectObjects( scene.children );

            for ( let i = 0; i < intersects.length; i ++ ) {
                gsap.to(intersects[0].object.material.uniforms.uMousePosition.value, {
                    duration: 0.1,
                    x: intersects[0].uv.x,
                    y: intersects[0].uv.y
                }) 
                gsap.to(intersects[0].object.material.uniforms.uMouseSpeed.value, {
                    duration: 0.1,
                    x: mouseSpeed.x,
                    y: mouseSpeed.y
                })
            }

            imageMeshes.map((mesh) => {
                mesh.plane.material.uniforms.uTime.value += 1
                // mesh.material.uniforms.uMousePosition.value = mousePosition
                // mesh.material.uniforms.uMouseSpeed.value = mouseSpeed
                // gsap.to(mesh.material.uniforms.uMouseSpeed, {
                //     duration: 0.1,
                //     value: mouseSpeed
                // })
                // mesh.plane.material.needsUpdate = true;
            })

            effectsPass.uniforms.time.value += 1
            gsap.to(effectsPass.uniforms.uMousePosition, {
                duration: 0.1,
                value: {
                    x: mousePosition.x,
                    y: mousePosition.y
                }
            })


            // shouldRender = false
        }
    }
    

    document.addEventListener("astro:before-swap", () => {
        destroyScene()
    })

    document.addEventListener("mousemove", (e) => {
        // console.log(e)
        shouldRender = true


        const positionX = (e.clientX / width) * 2 - 1
        const positionY = -(e.clientY / height) * 2 + 1

        let newSpeed = new Vector2(mousePosition.x - positionX, mousePosition.y - positionY)

        gsap.to(mousePosition, {
            duration: 0.1,
            x: positionX,
            y: positionY
        })

        gsap.to(mouseSpeed, {
            duration: 1,
            x: newSpeed.x,
            y: newSpeed.y
        })

        // mouseSpeed = newSpeed

        // console.log(mouseSpeed)
        
    })
    
    document.addEventListener("astro:page-load", () => {
        window.addEventListener("resize", handleResize)
        initialScroll = lenis.actualScroll
        initScene()
        addImagePlanes()
        render()
    })
    

</script>

<style>
    .three-canvas {
        pointer-events: none;
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: -1;
    }
</style>